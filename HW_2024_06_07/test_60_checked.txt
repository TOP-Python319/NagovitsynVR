1 - 2 ✅
2 - 1 ✅
3 - ❌, правильный ответ: 3, ваш ответ: 2
4 - 2 ✅
5 - 2 ✅
6 - 3 ✅
7 - 1 ✅
8 - 3 ✅
9 - 1 ✅
10 - ❌, правильный ответ: 2, ваш ответ: 1
11 - 4 ✅
12 - 4 ✅
13 - 2 ✅
14 - 3 ✅
15 - 1 ✅
16 - 1 ✅
17 - 4 ✅
18 - 2 ✅
19 - ❌, правильный ответ: 3, ваш ответ: 1
20 - 1 ✅
21 - 4 ✅
22 - 1 ✅
23 - ❌, правильный ответ: 3, ваш ответ: 1
24 - ❌, правильный ответ: 4, ваш ответ: 3
25 - 1 ✅
26 - 3 ✅
27 - 1 ✅
28 - ❌, правильный ответ: 2, ваш ответ: 4
29 - 4 ✅
30 - 3 ✅
31 - 2 ✅
32 - ❌, правильный ответ: 3, ваш ответ: 2
33 - ❌, правильный ответ: 4, ваш ответ: 2
34 - 4 ✅
35 - 2 ✅
36 - 2 ✅
37 - 2 ✅
38 - ❌, правильный ответ: 3, ваш ответ: 2
39 - ❌, правильный ответ: 4, ваш ответ: 1
40 - 3 ✅
41 - 1 ✅
42 - 2 ✅
43 - ❌, правильный ответ: 3, ваш ответ: 2
44 - 1 ✅
45 - 4 ✅
46 - 2 ✅
47 - ❌, правильный ответ: 2, ваш ответ: 3
48 - 3 ✅
49 - ❌, правильный ответ: 4, ваш ответ: 2
50 - 1 ✅
51 - 4 ✅
52 - 4 ✅
53 - ❌, правильный ответ: 1, ваш ответ: 4
54 - 3 ✅
55 - 4 ✅
56 - ❌, правильный ответ: 4, ваш ответ: 3
57 - 2 ✅
58 - 4 ✅
59 - 1 ✅
60 - 3 ✅

##############################
Правильных ответов: 45
Не правильных ответов: 15 [3, 10, 19, 23, 24, 28, 32, 33, 38, 39, 43, 47, 49, 53, 56]
Пропущено ответов: 0 

За каждый правильный ответ вы получаете 0.2 балла.
При дробной оценке округление в большую сторону.
Ваш балл: 9
##############################

Вопрос 3: 
    Метод класса в Python — это метод, который имеет доступ к атрибутам класса, но не к атрибутам экземпляра.
    Он определяется с использованием декоратора @classmethod и принимает первым аргументом cls, который ссылается на класс.
    Пример:
    ```python
    class MyClass:
        class_attr = 'class attribute'

        @classmethod
        def class_method(cls):
            print(cls.class_attr)
    ```
    
Вопрос 10: 
    Метод __repr__ используется для преобразования объекта в его строковое представление для отладки.
    Он должен возвращать строку, которая представляет объект в виде, удобном для отладки.
    Пример:
    ```python
    class MyClass:
        def __init__(self, value):
            self.value = value

        def __repr__(self):
            return f"MyClass(value={self.value})"
    ```
    
Вопрос 19: 
    Функция setattr используется для установки значения атрибута объекта.
    Она принимает три аргумента: объект, имя атрибута и значение атрибута.
    Пример:
    ```python
    class Hero:
        pass

    hero = Hero()
    setattr(hero, 'damage', 100)
    ```
    
Вопрос 23: 
    В атрибут self передается экземпляр класса, у которого вызвали метод.
    Это позволяет методу получать доступ к атрибутам и другим методам экземпляра.
    Пример:
    ```python
    class MyClass:
        def __init__(self, value):
            self.value = value

        def my_method(self):
            print(self.value)
    ```
    
Вопрос 24: 
    Защищенный метод в Python определяется добавлением одного подчеркивания в начало имени метода.
    Это указывает на то, что метод предназначен для внутреннего использования в классе и его подклассах.
    Пример:
    ```python
    class MyClass:
        def _protected_method(self):
            pass
    ```
    
Вопрос 28: 
    Геттер-методы помогают предотвратить несанкционированный доступ к атрибутам экземпляра.
    Это позволяет контролировать, как и когда атрибуты могут быть изменены, что делает код более безопасным и управляемым.
    Пример:
    ```python
    class MyClass:
        def __init__(self, value):
            self._value = value

        def get_value(self):
            return self._value
    ```
    
Вопрос 32: 
    Статический метод в Python не принимает экземпляр или класс в качестве первого аргумента.
    Это позволяет определять методы, которые не зависят от состояния экземпляра или класса.
    Пример:
    ```python
    class MyClass:
        @staticmethod
        def static_method():
            print("This is a static method")
    ```
    
Вопрос 33: 
    Магические методы, также известные как "dunder" методы, определяются с использованием двойного подчеркивания в начале и в конце имени.
    Они используются для реализации специальных операций, таких как сложение, сравнение и преобразование объектов.
    Пример:
    ```python
    class MyClass:
        def __init__(self, value):
            self.value = value

        def __add__(self, other):
            if isinstance(other, MyClass):
                return MyClass(self.value + other.value)
            return NotImplemented
    ```
    
Вопрос 38: 
    Класс bool не наследуется напрямую от класса object.
    Он наследуется от класса int, который, в свою очередь, наследуется от класса object.
    Пример:
    ```python
    class bool(int):
        pass
    ```
    
Вопрос 39: 
    Переопределение метода в Python — это процесс изменения поведения метода родительского класса в дочернем классе.
    Это позволяет дочернему классу предоставлять свою реализацию метода, которая может быть более специфичной для его потребностей.
    Пример:
    ```python
    class Parent:
        def my_method(self):
            print("Parent method")

    class Child(Parent):
        def my_method(self):
            print("Child method")
    ```
    
Вопрос 43: 
    Порядок разрешения методов (MRO) в Python используется для определения, какой метод будет вызван, если он определен в нескольких классах в иерархии наследования.
    Это позвочает избежать конфликтов имен и обеспечить правильное выполнение методов.
    Пример:
    ```python
    class A:
        pass

    class B(A):
        pass

    class C(B):
        pass

    print(C.__mro__)  # (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)
    ```
    
Вопрос 47: 
    Атрибут __slots__ используется для оптимизации использования памяти в Python.
    Он ограничивает количество атрибутов, которые можно добавить к экземпляру класса, что помогает уменьшить потребление памяти.
    Пример:
    ```python
    class MyClass:
        __slots__ = ['attr1', 'attr2']

        def __init__(self, attr1, attr2):
            self.attr1 = attr1
            self.attr2 = attr2
    ```
    
Вопрос 49: 
    Собственное исключение в Python создается путем определения нового класса, наследуемого от встроенного класса исключений.
    Это позволяет определить специфические исключения, которые могут быть использованы для обработки ошибок в вашем коде.
    Пример:
    ```python
    class MyCustomError(Exception):
        pass

    raise MyCustomError("This is a custom error")
    ```
    
Вопрос 53: 
    Модуль dataclasses в Python содержит функции для создания классов данных.
    Это позволяет легко определить классы, которые используются для хранения данных, с минимальным количеством кода.
    Пример:
    ```python
    from dataclasses import dataclass

    @dataclass
    class MyDataClass:
        value: int
    ```
    
Вопрос 56: 
    В Python 3 для реализации MRO используется алгоритм C3 линеаризации.
    Этот алгоритм определяет порядок, в котором будут вызываться методы, если они определены в нескольких классах в иерархии наследования.
    Пример:
    ```python
    class A:
        pass

    class B(A):
        pass

    class C(B):
        pass

    print(C.__mro__)  # (<class '__main__.C'>, <class '__main__.B'>, <class '__main__.A'>, <class 'object'>)
    ```
    
